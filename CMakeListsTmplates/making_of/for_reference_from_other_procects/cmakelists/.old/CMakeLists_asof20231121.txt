cmake_minimum_required(VERSION 3.26)
# cmake_minimum_required(VERSION 3.13)

# カレントディレクトリの名前を取得=>プロジェクト名、実行可能ファイル名などに使用
get_filename_component(PROJECT_NAME ${CMAKE_CURRENT_SOURCE_DIR} NAME)

project(${PROJECT_NAME} CXX)


# ユーザーのホームディレクトリを取得するための環境変数を使う
if (UNIX)
    execute_process(COMMAND sh -c "echo $HOME" OUTPUT_VARIABLE USER_HOME)
elseif (WIN32)
    execute_process(COMMAND cmd.exe /c "echo %USERPROFILE%" OUTPUT_VARIABLE USER_HOME)
    # バックスラッシュをスラッシュに置き換える
    string(REPLACE "\\" "/" USER_HOME ${USER_HOME})
endif ()

string(STRIP ${USER_HOME} USER_HOME) # 取得したディレクトリから不要な空白を削除する

# programディレクトリ（自分ルール）
set(USER_HOME_PROGRAM ${USER_HOME}/program)

# 自作ファイル収納用のサブディレクトリ名として使う
set(MY_SUBDIR_IDENTIFIER kkdfirst)

# インストール先の絶対パスを指定
set(CMAKE_INSTALL_PREFIX C:/msys64/ucrt64)
# set(CMAKE_INSTALL_PREFIX ${USER_HOME}/program)

# カレントディレクトリ内の.cppファイルを取得
file(GLOB SOURCES *.cpp)
# file(GLOB_RECURSE SOURCES *.cpp)  # サブディレクトリも含めて.cppファイルを再帰的に取得

# 除外するファイル名のリストを定義
set(EXCLUDE_FILES "exclude_file.cpp" "main.cpp")

# 除外するファイルをリストから除外する
foreach(EXCLUDE_FILE ${EXCLUDE_FILES})
    list(FILTER SOURCES EXCLUDE REGEX ${EXCLUDE_FILE})
endforeach()

# 除外するファイルを除外パターンで指定
list(FILTER SOURCES EXCLUDE REGEX "_test\\.cpp$")

# 静的ライブラリ名を定義 & 静的ライブラリを作成
if(SOURCES)
    set(MY_STATIC_LIB ${PROJECT_NAME}_static)
    set(MY_STATIC_LIB_OPTION -l${MY_STATIC_LIB}) # used in template.pc.in
    
    add_library(${MY_STATIC_LIB} STATIC ${SOURCES})
endif()

# 一般的なコンパイラオプションを追加（静的ライブラリと実行可能ファイルの両方に適用）
add_compile_options(-Wall -O3)  # 例: -Wallは警告を有効にし、-O2は最適化レベルを設定

# 実行可能ファイルを作成
add_executable(${PROJECT_NAME} main.cpp)

# 静的ライブラリをリンク
if(MY_STATIC_LIB)
    target_link_libraries(${PROJECT_NAME} PRIVATE ${MY_STATIC_LIB})
endif()

# # GTK3.0のパッケージを検索
# find_package(GTK3 REQUIRED)
# # ライブラリをリンク
# target_link_libraries(${PROJECT_NAME} PRIVATE GTK3::GTK3)
# libcomdlg32をリンク
# target_link_libraries(${PROJECT_NAME} PRIVATE comdlg32)


# 実行可能ファイルをビルド後に実行する
add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E echo "Executing..."
    COMMAND ./${PROJECT_NAME}  # 実行可能ファイルの名前を指定
    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}  # 実行するディレクトリを指定
)

# execute_process(COMMAND ./${PROJECT_NAME} WORKING_DIRECTORY ${CMAKE_BINARY_DIR})

# $ cmake -S . -B build
# $ cmake --build build


# # ファイルが存在するパスを設定する
# set(NEW_PKG_CONFIG_PATH ${CMAKE_INSTALL_PREFIX}/lib/pkgconfig)

# # # 環境変数を設定する
# # set(ENV{PKG_CONFIG_PATH} ${NEW_PKG_CONFIG_PATH}:${ENV{PKG_CONFIG_PATH}})
# # 環境変数を変更する
# execute_process(COMMAND ${CMAKE_COMMAND} -E env PKG_CONFIG_PATH=${NEW_PKG_CONFIG_PATH}:$ENV{PKG_CONFIG_PATH} ${CMAKE_COMMAND} -E echo $ENV{PKG_CONFIG_PATH} OUTPUT_VARIABLE PKG_CONFIG_PATH_OUTPUT)

# # バックスラッシュをスラッシュに置き換える
# string(REPLACE "\\" "/" NEW_PKG_CONFIG_PATH ${CMAKE_INSTALL_PREFIX}/lib/pkgconfig)


# list(APPEND CMAKE_PREFIX_PATH "${CMAKE_INSTALL_PREFIX}/lib/pkgconfig")
# list(APPEND CMAKE_FRAMEWORK_PATH "${CMAKE_INSTALL_PREFIX}/lib/pkgconfig")
# list(APPEND CMAKE_APPBUNDLE_PATH "${CMAKE_INSTALL_PREFIX}/lib/pkgconfig")
# list(APPEND PKG_CONFIG_PATH "${CMAKE_INSTALL_PREFIX}/lib/pkgconfig")

# message(STATUS "CMAKE_PREFIX_PATH: ${CMAKE_PREFIX_PATH}")

# # CMAKE_PREFIX_PATHのディレクトリもpkg-configの探索対象に含める
# set(PKG_CONFIG_USE_CMAKE_PREFIX_PATH 1)
# message(STATUS "PKG_CONFIG_USE_CMAKE_PREFIX_PATH: ${PKG_CONFIG_USE_CMAKE_PREFIX_PATH}")

# # set(PKG_CONFIG_PATH "${CMAKE_INSTALL_PREFIX}/lib/pkgconfig")
# message(STATUS "PKG_CONFIG_PATH: ${PKG_CONFIG_PATH}")

# pkg-configを使って情報を取得する
find_package(PkgConfig REQUIRED)
pkg_check_modules(MY_PKG REQUIRED ${MY_SUBDIR_IDENTIFIER}/rename_to_dir)

# 所望の情報を取得する（例：CFLAGSやLIBRARIES）
message(STATUS "CFLAGS: ${MY_PKG_CFLAGS}")
message(STATUS "LIBRARIES: ${MY_PKG_LIBRARIES}")

# ------------------ Install Related Section ------------------------ #
# cmake --install build


# ライブラリをインストール
if(MY_STATIC_LIB)
    install(
        TARGETS ${MY_STATIC_LIB}
        DESTINATION lib/${MY_SUBDIR_IDENTIFIER}
    )
endif()

# ヘッダーファイルをインストール
file(GLOB_RECURSE HEADER_FILES *.hpp)  # ヘッダーファイルのリストを取得

if(HEADER_FILES)
    install(
        FILES ${HEADER_FILES}
        DESTINATION include/${MY_SUBDIR_IDENTIFIER}
    )
endif()

# pkg-configファイルの生成 # NOTE: home dir is hard coded in resulting .pc file
configure_file(
    ${USER_HOME_PROGRAM}/cmakelists/template.pc.in
    ${CMAKE_BINARY_DIR}/pkg-config/${PROJECT_NAME}.pc
    @ONLY
)

# インストールコマンドを使って.pcファイルをインストールする場合
install(
    FILES ${CMAKE_BINARY_DIR}/pkg-config/${PROJECT_NAME}.pc
    # NOTE: because we cant set PKG_CONFIG_PATH
    DESTINATION ${CMAKE_INSTALL_PREFIX}/share/pkgconfig/${MY_SUBDIR_IDENTIFIER}
    # DESTINATION C:/msys64/ucrt64/lib/pkgconfig/kkd
)
# install(
#     FILES ${CMAKE_BINARY_DIR}/pkg-config/${PROJECT_NAME}.pc
#     # NOTE: this distination is not in PKG_CONFIG_PATH
#     DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/pkgconfig
# )

# export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/new/path/to/directory
# "C:/Users/kandk.LAPTOP-DUH9V1QM/program/lib/pkgconfig"

# ------------------ Test Related Section ------------------------ #

# オプション: テストを有効化するかどうかを指定
option(BUILD_TESTS "Build tests" OFF)
# # コマンドラインからテストを有効にする場合
# cmake -S . -B build -DBUILD_TESTS=ON

if(BUILD_TESTS)

    # バイナリディレクトリを指定する
    set(GTEST_BINARY_DIR ${CMAKE_BINARY_DIR}/gtest) # 例としてCMAKE_BINARY_DIRにgtestを配置する場合

    # # ソースディレクトリを指定する
    add_subdirectory(${USER_HOME}/program/test/google_test ${GTEST_BINARY_DIR})
    # add_subdirectory(path/to/your/google_test_directory ${GTEST_BINARY_DIR})

    # あなたのプロジェクトの設定など...

    # テスト用のソースファイルを定義
    set(TEST_SOURCES
        ${PROJECT_NAME}.cpp
        ${PROJECT_NAME}_test.cpp
        # 追加のテストソースファイルを必要に応じてここに追加
    )

    # テスト用の実行可能ファイル名を定義
    set(TEST_EXECUTABLE ${PROJECT_NAME}_test)

    # テスト名を定義
    set(TEST_NAME YourTestName)

    # あなたのプロジェクトの追加の設定やターゲットなど...

    # テスト用の実行可能ファイルを作成する
    add_executable(${TEST_EXECUTABLE} ${TEST_SOURCES}) # テスト用のソースファイルを追加

    target_link_libraries(${TEST_EXECUTABLE} gtest gtest_main) # Google Testのライブラリをリンク

    # あなたのプロジェクトの追加の設定やターゲットなど...

    # テストの実行
    enable_testing() # テストを有効にする
    add_test(NAME ${TEST_NAME} COMMAND ${TEST_EXECUTABLE})

    # ビルド後にシェルコマンドを実行する
    add_custom_command(TARGET ${TEST_EXECUTABLE} POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E echo "Tests are built. Executing..."
        COMMAND ${CMAKE_COMMAND} -E echo "Running tests..."
        COMMAND ${TEST_EXECUTABLE}
    )

    # cmake --build . --target test
else()
    message(STATUS "Tests are not enabled.")
endif()
